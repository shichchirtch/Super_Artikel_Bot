from aiogram import Router, F, html
import asyncio
import pickle
from bs4 import BeautifulSoup as bs
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, Command, StateFilter
import requests
from aiogram.fsm.context import FSMContext
from postgres_table import site_url, site_headers
from keyboards import *
from aiogram.enums import ParseMode
from filters import (PRE_START, IS_LETTER, IS_ADMIN, WORD_ACCEPT,
                     EXCLUDE_COMMAND, EXCLUDE_COMMAND_MIT_EXIT, STOP_EMODJI)
from lexicon import *
from postgres_functions import *
from bot_instance import FSM_ST, bot_storage_key, dp
from bot_base import *
from copy import deepcopy
from string import ascii_letters
from external_functions import translates, translates_in_english, regular_message, message_trasher, us_message_trasher
from note_class import User_Note
from random import choice
from stunde import *
from aiogram.exceptions import TelegramForbiddenError


ch_router = Router()

# @ch_router.message(F.video)
# async def video_id_geber_messages(message: Message):
#     data = message.video.file_id
#     print(data)


# @ch_router.message(F.photo)
# async def foto_id_geber_messages(message: Message):
#     data = message.photo[-1].file_id
#     print(data)

@ch_router.message(~StateFilter(FSM_ST.add_note_2), ~F.text)
async def delete_not_text_type_messages(message: Message):
    await message.delete()


@ch_router.message(CommandStart())
async def process_start_command(message: Message, state: FSMContext):
    user_name = message.from_user.first_name
    user_id = message.from_user.id
    data = await check_user_in_table(user_id)
    if not data:
        await insert_new_user_in_table(user_id, user_name)
        users_db[message.from_user.id] = deepcopy(user_dict)
        await insert_new_user_in_admin_table(user_id)
        await state.set_state(FSM_ST.after_start)
        await state.set_data(
            {'pur': '',  # personal ubersetzung —Ç–µ–º–ø–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
             'current_stunde': '',  # –î–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ —É—Ä–æ–∫–∞
             'spam': ''  # –°–æ–≥–ª–∞—Å–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
             })
        await message.answer(text=f'{html.bold(html.quote(user_name))}, '
                                  f'{start}',
                             parse_mode=ParseMode.HTML,
                             reply_markup=ReplyKeyboardRemove())
        att = await message.answer(text='W√§hlen Sie die Sprache aus, die Sie sprechen',
                                   reply_markup=lan_kb)
        users_db[user_id]['bot_ans'] = att
        bot_dict = await dp.storage.get_data(key=bot_storage_key)

        bot_dict[user_id] = {}  # –°–æ–∑–¥–∞—é —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–æ–º - tg_us_id
        await dp.storage.set_data(key=bot_storage_key, data=bot_dict)
        await asyncio.sleep(0.5)
        await add_in_list(user_id)  # –ö—Ç–æ —Å—Ç–∞—Ä—Ç–∞–Ω—É–ª –±–æ—Ç–∞ - –¥–æ–±–∞–≤–ª—è—é –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∞
        bot_server_base[user_id] = {}  # –°–æ–∑–¥–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
        test_state = await state.get_state()
        print('test state = ', test_state)
    else:
        await state.set_state(FSM_ST.after_start)
        await state.set_data(
            {'pur': '',  # personal ubersetzung —Ç–µ–º–ø–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
             'current_stunde': '',  # –î–ª—è –∏–∑—É—á–µ–∫–Ω–∏—è —Å–ª–æ–≤–∞—Ä–Ω–æ–≥–æ –∑–∞–ø–∞—Å–∞ —É—Ä–æ–∫–∞
             'spam': ''  # –°–æ–≥–ª–∞—Å–µ–Ω –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –±–æ—Ç–∞
             })
        users_db[message.from_user.id] = deepcopy(user_dict)
        lan = await return_lan(user_id)
        restart_msg = await regular_message(bot_was_restarted, lan)

        await message.answer(restart_msg)
        await message.delete()


@ch_router.message(PRE_START())
async def before_start(message: Message):
    prestart_ant = await message.answer(text='Klicken auf <b>start</b> !',
                                        reply_markup=pre_start_clava)
    await message.delete()
    await asyncio.sleep(3)
    await prestart_ant.delete()


@ch_router.message(Command('set_lan'), StateFilter(FSM_ST.after_start))
async def reselect_lan(message: Message):
    att = await message.answer(text='W√§hlen Sie die Sprache aus, die Sie sprechen',
                               reply_markup=lan_kb)
    await asyncio.sleep(2)
    await message.delete()
    await asyncio.sleep(9)
    await att.delete()


@ch_router.message(Command('presentation'), StateFilter(FSM_ST.after_start))
async def show_presentation(message: Message):
    print('show_presentation works')
    user_id = message.from_user.id
    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)
    lan = await return_lan(user_id)  # –¥–æ—Å—Ç–∞—é —è–∑—ã–∫
    referal_dict = {'tr':'https://youtu.be/OzeAUBBIJAk', 'ru':'https://www.youtube.com/watch?v=LUNjMktIszE',
                    'ar':'https://youtu.be/ecrMDlehMCs', 'de':'https://youtu.be/X9tOaR7rXcw',
                    'en':'https://youtu.be/UGITy9dYrTI', 'fa':'https://youtu.be/w8f62WhScek'}
    if lan in referal_dict:
        att = await message.answer(text=referal_dict[lan])
    else:
        att = await message.answer(text=referal_dict['de'])
    users_db[user_id]['bot_ans'] = att
    await asyncio.sleep(2)
    await message.delete()


@ch_router.message(StateFilter(FSM_ST.after_start), IS_LETTER())
async def artikle_geber(message: Message):
    user_id = message.from_user.id
    lan = await return_lan(user_id)  # –¥–æ—Å—Ç–∞—é —è–∑—ã–∫
    suchend_word = message.text
    # print("1111 suchend_word = ", suchend_word)
    if suchend_word.lower().startswith('die ') or suchend_word.lower().startswith('der ') or suchend_word.lower().startswith('das '):
        suchend_word = suchend_word[4:]
        # print("suchend_word = ", suchend_word)
    zapros = f'{site_url}{suchend_word}'
    print(zapros)
    req = requests.get(url=zapros, headers=site_headers)
    if req.status_code == 200:
        fin_plural = ''
        first_eng_analog = ' Keine'
        my_perevod = ' Keine'
        verb_formen = ''
        soup = bs(req.text, 'lxml')
        trans = soup.find(class_='rInfo')
        if not trans:
            sin_stroka = await regular_message(i_do_not_know, lan)  # –í—ã–≤–æ–∂—É —á—Ç–æ –Ω–µ –∑–Ω–∞—é —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞
        else:
            trans_data = trans.find(class_='rBox rBoxWht').find_all(class_='wNrn')
            if trans_data:  # –î–æ–±–∞–≤–ª–µ–Ω–æ —É—Å–ª–æ–≤–∏–µ, –ø—Ä–æ–≤–µ—Ä—è—é—â–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                en_block = trans_data[0]
                kirill_block = trans_data[1]
                fars_blok = trans_data[2]

                kit_lang = kirill_block.find_all('dd')
                fars_kit_lan = fars_blok.find_all('dd')
                en_structure = en_block.find_all('dd')
                if lan != 'de':
                    for perevod in (kit_lang + fars_kit_lan + en_structure):
                        data = perevod.get('lang')
                        if data == lan:  #  us_lan:  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞
                            my_perevod = perevod.text
                else:
                    my_perevod = 'ü§∑  Es ist unm√∂glich in der Grleiche Sprache zu √ºbersetzen'
            ######################################################################################
            SS_2 = soup.find('h1')
            chast_rechi = SS_2.text.split()[1]
            SS_2 = soup.find(class_='rAbschnitt')
            SS_1 = SS_2.find_all(class_='rBox rBoxWht')

            if chast_rechi == suchend_word:
                f_data = ' '

            elif chast_rechi == '–≥–ª–∞–≥–æ–ª–∞':
                #### Formen
                await insert_neue_wort_in_verb(user_id, message.text)
                verb_cont = SS_1[0].find(class_='rAufZu')  # .find(class_='wNrn')
                v2 = verb_cont.find(class_='rAuf rCntr')
                v3 = v2.find(class_='r1Zeile rU3px rO0px')
                verb_formen = v3.text.split('\n')
                ss = ''
                for x in verb_formen:
                    ss += x
                verb_formen = f'<b>Verb Formen :</b> {ss}\n\n'

                ### –°–∏–Ω–æ–Ω–æ–∏–º—ã
                verb_cont = SS_1[3].find(class_='rAufZu').find(class_='wNrn')
                a_cont = verb_cont.find_all('span')[1]
                finish_data = a_cont.text.replace(' ‚â°', ',')
                if finish_data[-1] not in ascii_letters:
                    f_data = finish_data[2:-1]
                else:
                    f_data = finish_data[2:]

                verb_needed_cont = SS_1[0]
                ### English analog
                test = verb_needed_cont.find(class_='rAufZu')
                test_2 = test.find(class_="rAuf rCntr")
                eng_1 = test_2.find(class_='r1Zeile rU6px rO0px')
                eng_2 = eng_1.get_text(strip=True)
                if eng_2:
                    first_eng_analog = eng_2.split(',')[0]
                else:
                    first_eng_analog = ''

            elif chast_rechi not in (
                    '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ', '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ', '–≥–ª–∞–≥–æ–ª–∞'):  # –¥–ª—è –Ω–∞—Ä–µ—á–∏–π –∏ –≤—Å–µ–≥–æ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ
                first_step = SS_1[0]
                second_step = first_step.find(class_='rAufZu')
                # print('test = ', second_step)
                eng_gleiche = second_step.find(class_='r1Zeile rU6px rO0px')

                first_eng_analog = eng_gleiche.text.strip("\n")
                if '\n' in first_eng_analog:
                    first_eng_analog = first_eng_analog.replace('\n', ' ')

                first_step2 = SS_1[2]
                second_step2 = first_step2.find(class_='rAufZu')

                third_step = second_step2.find(class_='wNrn')
                # print('third step', third_step.text)
                sin_data = third_step.text
                if 'a.' in sin_data:
                    syn_data = sin_data.split('a.')[1]
                    finish_data = syn_data.replace(' ‚â°', ',')
                    if finish_data[-1] not in ascii_letters:
                        f_data = finish_data[2:-1]
                    else:
                        f_data = finish_data[2:]

                else:
                    syn_data = sin_data
                if '\n' in syn_data:
                    syn_data = syn_data.replace('\n', ', ').replace('.', '').replace('‚â°', '')
                    n = syn_data.split()
                    s = ''
                    for x in n:
                        if len(x) > 1:
                            s += x + ' '
                    f_data = s[:-2]
                    if f_data[-1] not in ascii_letters:
                        f_data = f_data[:-1]
                    if ' ' in f_data:
                        f_data = f_data.replace(' ', ', ')
                    if ',,' in f_data:
                        f_data = f_data.replace(',,', ',')

            elif chast_rechi in ('–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ', '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ'):
                if chast_rechi == '—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ':
                    art_needed_cont = SS_1[0]
                    test = art_needed_cont.find(class_='rAufZu')
                    ### –ß–∞—Å—Ç—å —Å –∞—Ä—Ç–∏–∫–ª–µ–º
                    test_2 = test.find(class_="rAuf rCntr")
                    test_3 = test_2.find(class_='rCntr rClear')
                    artikl = test_3.get_text(strip=True)

                    final_data = artikl.split(',')
                    if len(final_data) > 1:
                        data = final_data[1] + ' ' + final_data[0]
                        if final_data[1] == 'der':
                            await insert_neue_wort_in_der(user_id, data)
                        elif final_data[1] == 'die':
                            await insert_neue_wort_in_die(user_id, data)
                        else:
                            await insert_neue_wort_in_das(user_id, data)

                    else:
                        data = 'die ' + final_data[0]
                    suchend_word = data

                    ##### –ß–∞—Å—Ç—å —Å–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º —á–∏—Å–ª–æ–º

                    plur_1 = test_2.find(class_='r1Zeile rU3px rO0px')
                    plur_2 = plur_1.find_all('q')
                    fin_plural = f'<b>Plural Forme : {plur_2[-1].text}</b>\n\n'

                    eng_1 = test_2.find(class_='r1Zeile rU6px rO0px')
                    # print('eng_1 = ', eng_1.get_text(strip=True))
                    eng_2 = eng_1.get_text(strip=True)
                    if eng_2:
                        first_eng_analog = eng_2.split(',')[0].capitalize()
                ##### ADJ
                needed_cont = SS_1[0]
                eng_p1 = needed_cont.find(class_='rAuf rCntr')
                eng_p2 = eng_p1.find(class_='r1Zeile rU6px rO0px')
                eng_p3 = eng_p2.get_text(strip=True)
                if eng_p3:
                    first_eng_analog = eng_p3.split(',')[0]
                else:
                    first_eng_analog = ''
                if chast_rechi == '–ø—Ä–∏–ª–∞–≥–∞—Ç–µ–ª—å–Ω–æ–≥–æ':
                    await insert_neue_wort_in_adj(user_id, message.text)
                needed_cont = SS_1[2]

                test_2 = needed_cont.find(class_='rAufZu')
                # print('test_2 = ', test_2)
                s1 = test_2.find_all('span')

                if len(s1):
                    if len(s1) == 1:
                        a_cont = s1[0]
                        finish_data = a_cont.text.replace(' ‚â°', ',')
                    elif len(s1) > 1:
                        a_cont = s1[1]
                        finish_data = a_cont.text.replace(' ‚â°', ',')
                    if finish_data[-1] not in ascii_letters:
                        f_data = finish_data[2:-1]
                    else:
                        f_data = finish_data[2:]
                else:
                    f_data = 'Keine Synonyme'
            else:
                f_data = ' ü§∑ '

            # –§–æ—Ä–º–∏—Ä—É—é –∫–æ–Ω–µ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if first_eng_analog:
                eng_str = f'<b>English : {first_eng_analog}</b>'
            else:
                eng_str = ''
            sin_stroka = (f'\n\n<b>{suchend_word}</b> ‚û°Ô∏è <b>√úbersetzung :</b> {my_perevod}\n\n'
                          f'{fin_plural}{verb_formen}'
                          f'{eng_str}\n\n'
                          f'<b>Synonyme :</b>  {f_data}')

        await message.answer(text=sin_stroka)

    else:
        att = await message.answer(await translates(i_do_not_know, lan))  # –í—ã–≤–æ–∂—É —á—Ç–æ –Ω–µ –∑–Ω–∞—é —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞)
        await asyncio.sleep(3)
        await att.delete()

    await message.delete()


@ch_router.message(Command('help'))
async def process_help_command(message: Message):
    lan = await return_lan(message.from_user.id)
    if not lan:
        await insert_lan(message.from_user.id, 'ru')
        lan = 'ru'
    erste = await regular_message('This bot can define ', lan)
    stroka = await regular_message(help_text, lan)
    # print('stroka = ', stroka)
    st_present = f'{erste} {artikel}\n\n{stroka} {presentation}'
    att = await message.answer(text=st_present)  # –ü–æ—á–µ–º—É –Ω–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞ –≤ –ª–µ–∫—Å–∏–∫–æ–Ω–µ bot_lexicon = {} ? -
    # –æ—Ç–≤–µ—Ç - –ø–æ—Ç–æ–º—É —á—Ç–æ —É–∂–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –≤ erste –∏ stroka
    await asyncio.sleep(30)
    await message.delete()
    await att.delete()


@ch_router.message(Command('liefern'))
async def process_show_command(message: Message):
    print('INTO LIFERN')
    user_id = message.from_user.id
    der = await return_der_string(user_id)
    await asyncio.sleep(0.2)
    die = await return_die_string(user_id)
    await asyncio.sleep(0.2)
    das = await return_das_string(user_id)
    await asyncio.sleep(0.2)
    verb = await return_verb_string(user_id)
    await asyncio.sleep(0.2)
    adj = await return_adj_string(user_id)
    await asyncio.sleep(0.2)

    DER = await message.answer(der)
    await asyncio.sleep(0.2)
    DIE = await message.answer(die)
    await asyncio.sleep(0.2)
    DAS = await message.answer(das)
    await asyncio.sleep(0.2)
    VER = await message.answer(verb)
    await asyncio.sleep(0.2)
    ADJ = await message.answer(adj)
    await message.delete()


@ch_router.message(Command('settings'), StateFilter(FSM_ST.after_start))
async def process_settings_command(message: Message, state: FSMContext):
    user_id = message.from_user.id
    lan = await return_lan(user_id)
    if not lan:
        await insert_lan(message.from_user.id, 'ru')
        lan = 'ru'
    att = await message.answer(await regular_message(settings_text, lan))
    await asyncio.sleep(20)
    await att.delete()
    await message.delete()


@ch_router.message(Command('grammatik'), StateFilter(FSM_ST.after_start))
async def process_grammatik_command(message: Message):
    user_id = message.from_user.id
    lan = await return_lan(user_id)
    if not lan:
        await insert_lan(message.from_user.id, 'ru')
        lan = 'ru'
    att = await message.answer(text=await regular_message(grammatik_text, lan), reply_markup=gram_kb)
    await asyncio.sleep(20)
    await att.delete()
    await message.delete()


@ch_router.message(Command('wortschatz'), StateFilter(FSM_ST.after_start))
async def process_worschatz_command(message: Message):
    """–•—ç–Ω–¥–ª–µ—Ä  –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤—É —Å 3 —É—á–µ–±–Ω–∏–∫–∞–º–∏"""
    user_id = message.from_user.id
    lan = await return_lan(user_id)
    if not lan:
        await insert_lan(message.from_user.id, 'ru')
        lan = 'ru'
    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)
    carture = await regular_message(it_auswahlen, lan)
    att = await message.answer_photo(photo=ABC, caption=carture, reply_markup=it_buch_kb)
    users_db[user_id]['bot_ans'] = att
    await asyncio.sleep(8)
    try:
        await att.delete()
    except Exception:
        pass
    await message.delete()


@ch_router.message(Command('add_wort'), StateFilter(FSM_ST.after_start))
async def process_add_wort_command(message: Message, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ"""
    user_id = message.from_user.id
    lan = await return_lan(user_id)
    if not lan:
        await insert_lan(message.from_user.id, 'ru')
        lan = 'ru'
    await state.set_state(FSM_ST.add_wort)

    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)

    att = await message.answer(f'<b>{await regular_message(deine_wort, lan)}</b>')
    users_db[message.from_user.id]['bot_ans'] = att
    await asyncio.sleep(3)
    await message.delete()


@ch_router.message(StateFilter(FSM_ST.add_wort), F.text, WORD_ACCEPT())
async def process_add_wort(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–∞–µ—Ç —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç—Ç–æ —Å–ª–æ–≤–æ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±–æ—Ç–∞, —á—Ç–æ –æ—á–µ–Ω—å –∫—Ä—É—Ç–æ !"""
    lan = await return_lan(message.from_user.id)
    user_id = message.from_user.id
    ubersatz_in_eng = await translates_in_english(message.text)  # –ü–µ—Ä–µ–≤–æ–∂—É –Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    print('ubersatz_in_eng = ', ubersatz_in_eng)
    if lan != 'de':
        heimat_lan = await translates(ubersatz_in_eng, lan)  # –ü–µ—Ä–µ–≤–æ–∂—É –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –Ω–∞ —è–∑—ã–∫ —é–∑–µ—Ä–∞
    else:
        heimat_lan = message.text
    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)

    temp_data = users_db[user_id]['user_msg']
    await message_trasher(user_id, temp_data)
    if lan not in  ('de', 'en'):
        if ubersatz_in_eng in gleiche_words or ubersatz_in_eng.lower() != heimat_lan.lower() and len(
                message.text.lower()) != len(heimat_lan):
            att = await message.answer(f'{message.text} =  {heimat_lan.lower()} ‚ùì',
                                       reply_markup=ja_nein_kb)
            users_db[user_id]['bot_ans'] = att

            bot_dict = await dp.storage.get_data(key=bot_storage_key)  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
            user_bot_stor = bot_dict[str(user_id)]  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
            user_bot_stor[message.text] = heimat_lan.lower()  # –ø–æ –∫–ª—é—á—É - –Ω–µ–º–µ—Ü–∫–æ–º—É —Å–ª–æ–≤—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ
            bot_dict[user_id] = user_bot_stor  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
            await dp.storage.update_data(key=bot_storage_key, data=bot_dict)  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
            await state.update_data(pur=message.text)  # –æ–±–Ω–æ–≤–ª—è—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞, –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç—É–¥–∞ —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º
        else:
            att = await message.answer(await translates('I do not know this word', lan))
            users_db[user_id]['bot_ans'] = att
    elif lan == 'en':
        att = await message.answer(f'{message.text} =  {heimat_lan.lower()} ‚ùì',
                                   reply_markup=ja_nein_kb)
        users_db[user_id]['bot_ans'] = att

        bot_dict = await dp.storage.get_data(key=bot_storage_key)  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
        user_bot_stor = bot_dict[str(user_id)]  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
        user_bot_stor[message.text] = heimat_lan.lower()  # –ø–æ –∫–ª—é—á—É - –Ω–µ–º–µ—Ü–∫–æ–º—É —Å–ª–æ–≤—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ
        bot_dict[user_id] = user_bot_stor  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
        await dp.storage.update_data(key=bot_storage_key, data=bot_dict)  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
        await state.update_data(pur=message.text)  # –æ–±–Ω–æ–≤–ª—è—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞, –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç—É–¥–∞ —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º

    else:
        att = await message.answer(f'{message.text} =  {message.text} ‚ùì',
                                   reply_markup=ja_nein_kb)
        users_db[user_id]['bot_ans'] = att
        bot_dict = await dp.storage.get_data(key=bot_storage_key)  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
        user_bot_stor = bot_dict[str(user_id)]  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
        user_bot_stor[heimat_lan] = heimat_lan  # –ø–æ –∫–ª—é—á—É - –Ω–µ–º–µ—Ü–∫–æ–º—É —Å–ª–æ–≤—É –ø—Ä–∏—Å–≤–∞–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ
        bot_dict[user_id] = user_bot_stor  # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞
        await dp.storage.update_data(key=bot_storage_key, data=bot_dict)  # –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
        await state.update_data(pur=message.text)  # –æ–±–Ω–æ–≤–ª—è—é —Å–ª–æ–≤–∞—Ä—å —é–∑–µ—Ä–∞, –∑–∞–ø–∏—Å—ã–≤–∞—é —Ç—É–¥–∞ —Å–ª–æ–≤–æ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º


@ch_router.message(StateFilter(FSM_ST.personal_uber), F.text)
async def process_add_personal_ubersetzen_command(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ–º–µ—Ü–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ —è–∑—ã–∫ —é–∑–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –æ–Ω –µ–º—É —Å–∞–º –ø–æ—Å—ã–ª–∞–µ—Ç"""
    print('pesonal uber works\n\n')
    us_dict = await state.get_data()
    lan = await return_lan(message.from_user.id)
    user_id = message.from_user.id
    isk_slovo = us_dict['pur']  # –ü–æ–ª—É—á–∞—é –Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤–æ

    bot_dict = await dp.storage.get_data(key=bot_storage_key)
    user_bot_stor = bot_dict[str(user_id)]  # –ü–æ–ª—É—á–∞—é –¥–æ—Å—Ç—É–ø –ø–æ tg_id
    user_bot_stor[isk_slovo] = message.text  # –°—É–¥—è –ø–æ –≤—Å–µ–º—É –∑–¥–µ—Å—å –ø–æ–ª—É—á–∞–µ—Ç—Å—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –≤–∏–¥–∞ {"–Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤–æ":"–ø–µ—Ä–µ–≤–æ–¥ —é–∑–µ—Ä–∞"}
    bot_dict[user_id] = user_bot_stor
    await dp.storage.update_data(key=bot_storage_key, data=bot_dict)

    await state.update_data(pur='')
    await state.set_state(FSM_ST.add_wort)

    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)

    otvet = await regular_message(erfolgreich_fugen, lan)
    uber_noch = await regular_message(noch, lan)
    att = await message.answer(f'{otvet}\n\n{uber_noch}', reply_markup=ja_nein_kb)
    users_db[user_id]['user_msg'] = att


@ch_router.message(Command('lernen'), StateFilter(FSM_ST.after_start))
async def process_lernen_command(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–ª–≤–∞–æ–π –∏–∑ —Ç—Ä—ë—Ö —É—á–µ–±–Ω–∏–∫–æ–≤"""
    user_id = message.from_user.id
    await state.set_state(FSM_ST.lernen)
    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)
    att = await message.answer_photo(photo=ABC, caption=aus_welche_buch,
                                     reply_markup=it_buch_kb)
    users_db[user_id]['bot_ans'] = att
    await message.delete()


@ch_router.message(Command('schreiben'), StateFilter(FSM_ST.after_start))
async def process_schreiben_command(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–ª—è–µ—Ç —Ç–µ–∫—Å—Ç —Å –∫–ª–≤–∞–æ–π –∏–∑ —Ç—Ä—ë—Ö —É—á–µ–±–Ω–∏–∫–æ–≤"""
    user_id = message.from_user.id
    await state.set_state(FSM_ST.schreiben)
    temp_data = users_db[user_id]['bot_ans']
    await message_trasher(user_id, temp_data)
    att = await message.answer_photo(photo= ABC, caption=aus_welche_buch,
                               reply_markup=it_buch_kb)
    users_db[user_id]['bot_ans'] = att
    await message.delete()


@ch_router.message(StateFilter(FSM_ST.schreiben), EXCLUDE_COMMAND_MIT_EXIT(), F.text, STOP_EMODJI())
async def check_writing_process(message: Message, state: FSMContext):
    print('check_writing works')
    dict_user = await state.get_data()
    lan = await return_lan(message.from_user.id)
    using_dict = dict_user['current_stunde']
    # print('bot_rus_collection = ', bot_rus_collection)
    previous_word = dict_user['pur']  # –ü–æ–ª—É—á–∞—é  –Ω–µ–º–µ—Ü–∫–æ–µ —Å–ª–æ–≤–æ
    # print('previous_word = ', previous_word)
    if lan != 'de':
        if ',' in previous_word:
            previous_word_1 = previous_word.split(',')[0]
        elif ('(') in previous_word:
            previous_word_1 = previous_word.split('(')[0]
        else:
            previous_word_1 = previous_word

        if previous_word_1.lower() == message.text.lower() or previous_word_1.lower == message.text.lower():

            await message.answer(f'<b>Richtig !</b>    ü•≥\n\nDas ist <b>{previous_word}</b>')
            await message.delete()
            # print('\n\n\nuser_dict = ', user_dict)
            del using_dict[previous_word] # —É–¥–∞–ª—è—é –ø–∞—Ä—É –∫–ª—é—á-–∑–∞–Ω—á–µ–Ω–∏–µ –∏–∑ –∫–æ–ø–∏–∏ —Å–ª–æ–≤–∞—Ä—è
        else:
            await message.answer(f'Sie haben geantwortet <b>{message.text}</b>\n\n'
                                 f'Richtige Antwort  ist <b>{previous_word}</b>')
            await message.delete()
        working_tuple = choice(sorted(using_dict.items()))  # –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        deutsch, engl = working_tuple
        combined_key = lan + '_' + engl
        if lan == 'ru':
            if combined_key not in bot_rus_collection:
                uber_eng = await translates(engl, lan)
                bot_rus_collection[combined_key] = uber_eng  # –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫ —é–∑–µ—Ä–∞
            else:
                uber_eng = bot_rus_collection[combined_key]
        elif lan == 'uk':
            if combined_key not in bot_ukr_collection:
                uber_eng = await translates(engl, lan)
                bot_ukr_collection[combined_key] = uber_eng
            else:
                uber_eng = bot_ukr_collection[combined_key]
        else:
            if combined_key not in bot_word_collection:
                uber_eng = await translates(engl, lan)
                bot_word_collection[combined_key] = uber_eng
            else:
                uber_eng = bot_word_collection[combined_key]

        await state.update_data(pur=deutsch)
        if len(using_dict)>1:
            if lan != 'en':
                await message.answer(text=f'Schreiben Sie bitte die √úbersetzung des Worts !\n\n<b>{uber_eng}</b>'
                                          f'\n\n<i>English</i> = <b>{engl}</b>',
                                     reply_markup=exit_clava)
            else:
                await message.answer(text=f'Schreiben Sie bitte die √úbersetzung des Worts !\n\n<b>{uber_eng}</b>',
                                     reply_markup=exit_clava)
        else:
            exit_command = ' /exit'
            ans = await regular_message(alles, lan)
            combo_str = ans + ' ' + exit_command
            att = await message.answer(text=combo_str)
            users_db[message.from_user.id]['user_msg'] = att


        ######### –ß–∞—Å—Ç—å —Å –≥–¥–µ —É —é–∑–µ—Ä–∞ —É —Å–∞–º–æ–≥–æ –Ω–µ–º–µ—Ü–∫–∏–π —è–∑—ã–∫ ####################################
    else:
        if len(previous_word)==2:
            previous_word = previous_word[0]
        if ',' in previous_word:
            previous_word_1 = previous_word.split(',')[0]
        elif ('(') in previous_word:
            previous_word_1 = previous_word.split('(')[0]
        else:
            previous_word_1 = previous_word
        if previous_word_1.lower() != message.text.lower():
            await message.answer(f'Sie haben geantwortet <b>{message.text}</b>\n\n'
                                 f'Richtige Antwort  ist <b>{previous_word_1}</b>')
            await message.delete()
        else:
            await message.answer(f'<b>Richtig !</b>    ü•≥\n\nDas ist <b>{previous_word}</b>')
            await message.delete()
            del using_dict[previous_word]

        if using_dict:
            working_tuple = choice(sorted(using_dict.items()))  # –í—ã–±–∏—Ä–∞—é —Å–ª—É—á–∞–π–Ω—É—é –ø–∞—Ä—É –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            deutsch, engl = working_tuple
            await state.update_data(pur=deutsch)
            await message.answer(text=f'Schreiben Sie bitte die √úbersetzung des Worts !\n\n<b>{engl}</b>', reply_markup=exit_clava)
        else:
            exit_command = ' /exit'
            ans = await regular_message(alles, lan)
            combo_str = ans + ' ' + exit_command
            att = await message.answer(text=combo_str)
            users_db[message.from_user.id]['user_msg'] = att



@ch_router.message(Command('exit'))
async def process_exit_command(message: Message, state: FSMContext):
    lan = await return_lan(message.from_user.id)
    if not lan:
        await insert_lan(message.from_user.id, 'ru')
        lan = 'ru'
    user_id = message.from_user.id
    current_state = await state.get_state()
    if current_state != 'FSM_ST:after_start':
        await state.set_state(FSM_ST.after_start)
        await state.update_data(pur='', current_stunde='')  # reset user data
        temp_data = users_db[user_id]['bot_ans']
        await message_trasher(user_id, temp_data)
        temp_data = users_db[user_id]['user_msg']
        await us_message_trasher(user_id, temp_data)
        att = await message.answer(text=await regular_message(exit_msg, lan), reply_markup=ReplyKeyboardRemove())
        users_db[user_id]['bot_ans'] = att
        await message.delete()
    else:
        temp_data = users_db[user_id]['bot_ans']
        await message_trasher(user_id, temp_data)
        att = await message.answer(text=await regular_message(exit_after_start, lan), reply_markup=ReplyKeyboardRemove())
        users_db[user_id]['bot_ans'] = att
        await message.delete()



@ch_router.message(Command('review'), StateFilter(FSM_ST.after_start))
async def process_review_command(message: Message):
    lan = await return_lan(message.from_user.id)
    text = await regular_message(review_text, lan)
    fin_text = f'{text} \n\n\n @Smart_Imperium_bot'
    att = await message.answer(text=fin_text)
    await asyncio.sleep(20)
    await att.delete()
    await message.delete()


@ch_router.message(Command('zeigen'), StateFilter(FSM_ST.after_start))
async def process_notiz_command(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–æ–π - –≥–¥–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –∑–∞–º–µ—Ç–∫–∏ –∏ —Å–ª–æ–≤–∞"""
    lan = await return_lan(message.from_user.id)
    us_text = await regular_message(zeigen_start, lan)
    att = await message.answer(us_text, reply_markup=zeigen_kb)
    temp_data = users_db[message.from_user.id]['bot_ans']
    await message_trasher(message.from_user.id, temp_data)
    users_db[message.from_user.id]['bot_ans'] = att
    await asyncio.sleep(3)
    await message.delete()


@ch_router.message(StateFilter(FSM_ST.add_note_1), F.text, EXCLUDE_COMMAND())
async def add_notiz_1(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏ –≤—ã–≤–æ–¥–∏—Ç –ø—Ä–æ—Å—å–±—É –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–º—É –∑–∞–º–µ—Ç–∫—É"""
    print('add_notiz_1 works')
    lan = await return_lan(message.from_user.id)
    await state.update_data(pur=message.text)
    otvet = await regular_message(your_name_is, lan)
    otvet_2 = await regular_message(step_2, lan)
    stroka = f"{otvet} {message.text}\n\n{otvet_2}"
    att = await message.answer(stroka)
    temp_data = users_db[message.from_user.id]['bot_ans']
    await message_trasher(message.from_user.id, temp_data)
    users_db[message.from_user.id]['bot_ans'] = att
    await state.set_state(FSM_ST.add_note_2)
    await message.delete()


@ch_router.message(StateFilter(FSM_ST.add_note_2), F.content_type.in_({'photo', 'text'}), EXCLUDE_COMMAND())
async def add_notiz_2(message: Message, state: FSMContext):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç, —á—Ç–æ –∑–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞"""
    print('add_notiz_2 works')
    us_dict = await state.get_data()
    user_id = message.from_user.id
    lan = await return_lan(message.from_user.id)
    note_name = us_dict['pur']
    temp_data = users_db[message.from_user.id]['bot_ans']
    await message_trasher(user_id, temp_data)

    if message.text:
        new_note = User_Note(name=note_name, foto='', description=message.text)
    else:
        foto_id = message.photo[-1].file_id
        capcha = message.caption
        new_note = User_Note(name=note_name, foto=foto_id, description=capcha)

    us_zam = await return_zametki(user_id)
    if not us_zam:
        zam_dict = {note_name: new_note}  # –°–æ–∑–¥–∞—é —Å–ª–æ–≤–∞—Ä—å - –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ : —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏
        serialized_data = pickle.dumps(zam_dict)  # –°–µ—Ä–∏–∞–ª–∏–∑—É—é –æ–±—ä–µ–∫—Ç
        await insert_serialised_note(user_id, serialized_data)  # –í—Å—Ç–∞–≤–ª—è—é –µ–≥–æ –≤ Postgress

    else:
        zam_dict = pickle.loads(us_zam)
        zam_dict[note_name] = new_note
        serialized_data = pickle.dumps(zam_dict)  # –°–µ—Ä–∏–∞–ª–∏–∑—É—é –æ–±—ä–µ–∫—Ç
        await insert_serialised_note(user_id, serialized_data)  # –í—Å—Ç–∞–≤–ª—è—é –µ–≥–æ –≤ Postgress

    stroka = await regular_message(successfully_add, lan)
    att = await message.answer(stroka)
    await state.set_state(FSM_ST.after_start)
    await asyncio.sleep(5)
    await att.delete()
    await message.delete()


@ch_router.message(StateFilter(FSM_ST.add_note_2))
async def something_goes_wrong(message: Message, state: FSMContext):
    print('something_goes_wrong')
    lan = await return_lan(message.from_user.id)
    await state.update_data(pur='')
    temp_data = users_db[message.from_user.id]['bot_ans']
    await message_trasher(message.from_user.id, temp_data)
    await state.set_state(FSM_ST.after_start)
    stroka = await regular_message(wrong_add_new_note, lan)
    att = await message.answer(stroka)
    await asyncio.sleep(4)
    await message.delete()
    await att.delete()

@ch_router.message(Command('maerchen'), StateFilter(FSM_ST.after_start))
async def maerchen_command(message: Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª—è—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–æ–π - skazki"""
    lan = await return_lan(message.from_user.id)
    us_text = await regular_message(maerchen_text, lan)
    att = await message.answer(us_text, reply_markup=maerchen_kb)
    temp_data = users_db[message.from_user.id]['bot_ans']
    await message_trasher(message.from_user.id, temp_data)
    users_db[message.from_user.id]['bot_ans'] = att
    await asyncio.sleep(3)
    await message.delete()


###########################################ADMIN PART#######################################
@ch_router.message(Command('admin'), IS_ADMIN())
async def admin_enter(message: Message):
    print('admin_enter works')
    att = await message.answer(admin_eintritt)
    await asyncio.sleep(12)
    await att.delete()


@ch_router.message(Command('skolko'), IS_ADMIN())
async def get_quantyty_users(message: Message):
    qu = await return_quantity_users()
    str_qu = str(len(qu))
    last_number = str_qu[-1]
    if last_number in ('2', '3', '4'):
        await message.answer(f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ <b>{len(qu)}</b> —é–∑–µ—Ä–∞')
    elif last_number == '1':
        await message.answer(f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ <b>{len(qu)}</b> —é–∑–µ—Ä')
    else:
        await message.answer(f'–ë–æ—Ç–∞ –∑–∞–ø—É—Å—Ç–∏–ª–∏ <b>{len(qu)}</b> —é–∑–µ—Ä–æ–≤')





@ch_router.message(Command('send_msg'), IS_ADMIN())
async def send_message(message: Message, state: FSMContext):
    await state.set_state(FSM_ST.admin)
    await message.answer('Schreib ihre Nachrichten')


@ch_router.message(StateFilter(FSM_ST.admin))
async def send_message(message: Message, state: FSMContext):
    us_list = await return_spam_users()
    print('us_list = ', *us_list, sep='\n')
    # text in English
    us_list.remove(6685637602)
    for chat_id in us_list:
        lan = await return_lan(chat_id)  # –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —è–∑—ã–∫ –∏–∑ –ø–æ—Å—Ç–≥—Ä–µ—Å–∞
        spam = await translates(message.text, lan)
        try:
            await message.bot.send_message(chat_id=chat_id, text=spam)
        except TelegramForbiddenError:
            pass
        await asyncio.sleep(0.2)

    await state.set_state(FSM_ST.after_start)
    await message.answer('Mailing abgeschlossen')


@ch_router.message(IS_ADMIN(), Command('dump'))
async def dump_db(message: Message, state: FSMContext):
    bot_dict = await dp.storage.get_data(key=bot_storage_key)  # –ü–æ–ª—É—á–∞—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞
    with open('save_db.pkl', 'wb') as file:
        pickle.dump(bot_dict, file)
    with open('bot_rus_wortschatz_db.pkl', 'wb') as file:
        pickle.dump(bot_rus_wortschatz, file)

    with open('bot_ukr_wortschatz_db.pkl', 'wb') as file:
        pickle.dump(bot_ukr_wortschatz, file)

    with open('bot_anders_wortschatz_db.pkl', 'wb') as file:
        pickle.dump(bot_anders_wortschatz, file)

    with open('bot_rus_collection_db.pkl', 'wb') as file:
        pickle.dump(bot_rus_collection, file)

    with open('bot_ukr_collection_db.pkl', 'wb') as file:
        pickle.dump(bot_ukr_collection, file)

    with open('bot_word_collection_db.pkl', 'wb') as file:
        pickle.dump(bot_word_collection, file)

    with open('bot_lexicon_db.pkl', 'wb') as file:
        pickle.dump(bot_lexicon, file)
    await message.answer('–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ !')
    await state.set_state(FSM_ST.after_start)

@ch_router.message(IS_ADMIN(), Command('load'))
async def load_db(message: Message, state: FSMContext):
    with open('save_db.pkl', 'rb') as file:
        recover_base = pickle.load(file)
        await dp.storage.set_data(key=bot_storage_key, data=recover_base)  # –û–±–Ω–æ–≤–ª—è—é —Å–ª–æ–≤–∞—Ä—å –±–æ—Ç–∞

    with open('bot_rus_wortschatz_db.pkl', 'rb') as file:
        recover_bot_rus_wortschatz = pickle.load(file)
        bot_rus_wortschatz.update(recover_bot_rus_wortschatz)

    with open('bot_ukr_wortschatz_db.pkl', 'rb') as file:
        recover_bot_ukr_wortschatz = pickle.load(file)
        bot_ukr_wortschatz.update(recover_bot_ukr_wortschatz)

    with open('bot_anders_wortschatz_db.pkl', 'rb') as file:
        recover_bot_anders_wortschatz = pickle.load(file)
        bot_anders_wortschatz.update(recover_bot_anders_wortschatz)

    with open('bot_rus_collection_db.pkl', 'rb') as file:
        recover_bot_rus_coll = pickle.load(file)
        bot_rus_collection.update(recover_bot_rus_coll)

    with open('bot_ukr_collection_db.pkl', 'rb') as file:
        recover_bot_ukr_coll = pickle.load(file)
        bot_ukr_collection.update(recover_bot_ukr_coll)

    with open('bot_word_collection_db.pkl', 'rb') as file:
        recover_bot_word_coll = pickle.load(file)
        bot_rus_collection.update(recover_bot_word_coll)

    with open('bot_lexicon_db.pkl', 'rb') as file:
        recover_bot_lexicon = pickle.load(file)
        bot_lexicon.update(recover_bot_lexicon)

    await message.answer('–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã !')
    await state.set_state(FSM_ST.after_start)


@ch_router.message()
async def trasher(message: Message):
    print('TRASHER')
    if message.text in ('/zeigen', '/help'):
        att = await message.answer('TRASHER WORKS')
        await asyncio.sleep(5)
        await att.delete()
    await asyncio.sleep(1)
    await message.delete()
